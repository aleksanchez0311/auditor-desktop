package cu.lacumbre.auditor.model;

public class Workable extends Item implements Buildable {

    private Recipe recipe;
    private double recipeCost;

    public Workable(String description, MeasureUnit measureUnit, int code, boolean archivated) {
        super(description, measureUnit, code, archivated);
    }

    public Workable(int id, String description, MeasureUnit measureUnit, int code, boolean archivated) {
        this(id, description, measureUnit, null, code, archivated);
    }

    protected Workable(int id, String description, MeasureUnit measureUnit, Recipe recipe, int code, boolean archivated) {
        super(id, description, measureUnit, code, archivated);
        this.recipe = recipe;
        this.recipeCost = calculateRecipeCost();
    }

    public void setRecipe(Recipe recipe) {
        this.recipe = recipe;
        this.recipeCost = calculateRecipeCost();
    }

    public boolean hasRecipe() {
        return recipe != null ? !recipe.getIngredients().isEmpty() : false;
    }

    public Recipe getRecipe() {
        return recipe;
    }

    public double getRecipeCost() {
        return recipeCost;
    }

    private double calculateRecipeCost() {
        double costOfRecipe = 0.0d;
        if (this.recipe != null) {
            for (Ingredient ingredient : recipe.getIngredients()) {
                double ammount = ingredient.getAmmount();
                if (ingredient.getItem() instanceof Workable workable) {
                    costOfRecipe += workable.calculateRecipeCost() * ammount;
                } else {
                    RawMaterial rawMaterial = (RawMaterial) ingredient.getItem();
                    costOfRecipe += rawMaterial.getDefaultCost() * ammount;
                }
            }
        }
        return costOfRecipe;
    }

    public boolean isCompuesto() {
        if (this.recipe != null) {
            for (Ingredient ingredient : recipe.getIngredients()) {
                int id = ingredient.getId();
                if (ingredient.getItem() instanceof ProductListo) {
                    return true;
                }
            }
        }
        return false;
    }
    
    public ProductListo getCompuesto() {
        if (this.recipe != null) {
            for (Ingredient ingredient : recipe.getIngredients()) {
                int id = ingredient.getId();
                if (ingredient.getItem() instanceof ProductListo productListo) {
                    return productListo;
                }
            }
        }
        return null;
    }

    public boolean hasItAsIngredient(Item item) {
        if (hasRecipe()) {
            for (Ingredient ingredient : recipe.getIngredients()) {
                if (ingredient.getItem().equals(item)) {
                    return true;
                }
            }
        }
        return false;
    }

    public String print(double cantidad, String level) throws NullPointerException {
        String print = "<< Receta para " + cantidad + " " + measureUnit.getAbrev() + " del elemento tipo " + getClass() + " [ " + description + " -> " + "Costo Unitario: " + calculateRecipeCost() + ", Costo Total: " + cantidad * calculateRecipeCost() + "] >>\n";
        if (this.recipe != null) {
            for (Ingredient ingredient : recipe.getIngredients()) {
                double ammount = ingredient.getAmmount();
                if (ingredient.getItem() instanceof Workable workable) {
                    String levelDown = level + "_";
                    //print += levelDown + workable.print(levelDown);
                    print += level + " " + workable.getClass() + ": " + workable.getDescription() + " => Cantidad: " + cantidad * ammount + " -> Costo Unitario: " + workable.calculateRecipeCost() + ", Costo: " + cantidad * ammount * workable.calculateRecipeCost() + "\n";
                } else {
//                    line = line.replaceFirst("_", "");
                    RawMaterial rawMaterial = (RawMaterial) ingredient.getItem();
                    print += level + " " + rawMaterial.getClass() + ": " + rawMaterial.getDescription() + " => Cantidad: " + cantidad * ammount + " -> Costo Unitario: " + rawMaterial.getDefaultCost() + ", Costo: " + cantidad * ammount * rawMaterial.getDefaultCost() + "\n";
                }
            }
        }
        return print;
    }

    public static Workable generate() {
        return new Workable("Autogenerated", MeasureUnit.generate(), 0, false);
    }

}
