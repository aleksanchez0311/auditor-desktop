package cu.lacumbre.auditor.view.utils;

import cu.lacumbre.auditor.crud.ItemsCRUD;
import cu.lacumbre.auditor.crud.Mapper;
import cu.lacumbre.auditor.crud.OperationsCRUD;
import cu.lacumbre.auditor.model.Item;
import cu.lacumbre.auditor.model.Product;
import cu.lacumbre.auditor.view.inventory.MakeSale;
import cu.lacumbre.auditor.view.inventory.MapperGestion;
import cu.lacumbre.excelreaper.NullCellException;
import cu.lacumbre.excelreaper.Reaper;
import cu.lacumbre.utils.Logger;
import java.awt.Component;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import org.apache.poi.ss.formula.CollaboratingWorkbooksEnvironment;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class LoadCuadreOld {

//    public static final int PROFIT_ROW = 4;
//    public static final int PRICES_ROW = 5;
//    public static final int DESCRIPTIONS_ROW = 6;
//    public static final int AMMOUNTS_ROW = 74;
//    private static final int WORKING_COLS = 105;
//    
//    private final MakeSale makeSale;
//    private final OperationsCRUD operationsCRUD;
//    private final ItemsCRUD itemsCRUD;
//    private final File selectedFile;
//    private final Mapper mapper;
//    private final JPanel itemsPanel;
//    private final JButton btnSaveOperations, btnLoadCuadre;
//    private final Connection connection;
//    
//
//    public LoadCuadreOld(Connection connection, MakeSale makeSale, OperationsCRUD operationsCRUD, ItemsCRUD itemsCRUD, File selectedFile, Component[] components) throws SQLException {
//        this.connection = connection;
//        this.makeSale = makeSale;
//        this.operationsCRUD = operationsCRUD;
//        this.itemsCRUD = itemsCRUD;
//        this.selectedFile = selectedFile;
//        this.mapper = new Mapper(connection, itemsCRUD);
//        this.itemsPanel = (JPanel) components[0];
//        this.btnSaveOperations = (JButton) components[1];
//        this.btnLoadCuadre = (JButton) components[2];
//    }
//    
//    private TreeMap<Product, Double[]> getData(List<Row> list) throws UnmapedProductsException, IOException, NullCellException, CollaboratingWorkbooksEnvironment.WorkbookNotFoundException {
//        TreeMap<Product, Double[]> data = new TreeMap<>(Comparator.comparingInt(Item::getCode));
//        Reaper reaper = new Reaper(list);
//        ArrayList<String> unmappedItemsList = new ArrayList<>();
//        String description = "";
//        for (int i = 1; i < WORKING_COLS; i++) {
//            description = (String) reaper.valueOf(DESCRIPTIONS_ROW, i);
//            if (description != null && !description.equals("")) {
//                Item item = mapper.get(description.strip());
//                if (item == null) {
//                    unmappedItemsList.add(description.strip());
//                } else if (!item.getCategory().equals("Autogenerated")) {
//                    double ammount = (double) reaper.valueOf(AMMOUNTS_ROW, i);
//                    double price = (double) reaper.valueOf(PRICES_ROW, i);
//                    if (ammount > 0) {
//                        data.put((Product) item, new Double[]{ammount, price, 0.0d});
//                    }
//                }
//            }
//        }
//        if (!unmappedItemsList.isEmpty()) {
//            String message = "Producto(s) nuevo(s):\n";
//            for (String item : unmappedItemsList) {
//                message += item + "\n";
//            }
//            message += "Debe mapearlo(s) antes de continuar."; // TODO agregar forma automatica de mapear los nuevos porductos
//            throw new UnmapedProductsException(message, unmappedItemsList);
//        }
//        return data;
//    }
//
//    public void loadCuadre() throws NullCellException, CollaboratingWorkbooksEnvironment.WorkbookNotFoundException, SQLException {
//        ArrayList<Map.Entry<Product, Double[]>> diferentPricesList = new ArrayList<>();
//        try {
//            XSSFWorkbook wb = new XSSFWorkbook(new FileInputStream(selectedFile));
//            XSSFSheet sheet = wb.getSheetAt(0);
//            List<Row> list = new ArrayList<>();
//            for (Row row : sheet) {
//                list.add((XSSFRow) row);
//            }
//            TreeMap<Product, Double[]> data = getData(list);
//            if (data != null) {
//                int count = 0;
////                int sumPrices = 0;
////TODO pasar esta funcion al ammountsChecker
//                for (Component component : itemsPanel.getComponents()) {
//                    for (Map.Entry<Product, Double[]> record : data.entrySet()) {
//                        JPanel panel = (JPanel) component;
//                        if (panel.getComponents().length > 0) {
//                            JCheckBox check = (JCheckBox) panel.getComponent(0);
//                            JLabel id = (JLabel) panel.getComponent(1);
//                            JSpinner field = (JSpinner) panel.getComponent(2);
//                            if (Integer.parseInt(id.getText()) == record.getKey().getId()) {
//                                if (record.getValue()[0] > 0) {
//                                    check.setSelected(true);
//                                    field.setValue(record.getValue()[0]);
//                                    double productPrice = ((Product) record.getKey()).getPrice();
//                                    if (productPrice != record.getValue()[1]) {
//                                        diferentPricesList.add(record);
//                                    }
////                                    sumPrices += productPrice;
//                                    count++;
//                                    break;
//                                }
//                            }
//                        }
//                    }
//                }
//                btnSaveOperations.setEnabled(true);
//                btnLoadCuadre.setEnabled(false);
//                String message = "Listado de operaciones de entrada/salida importado correctamente.";
//                if (!diferentPricesList.isEmpty()) {
//                    message += " Pero el(los) producto(s)\n";
//                    for (Map.Entry<Product, Double[]> record : diferentPricesList) {
//                        message += record.getKey().toString() + " (Anterior " + ((Product) record.getKey()).getPrice() + " -> Importado: " + record.getValue()[1] + ")" + "\n";
//                    }
//                    message += " tiene(n) cambio de precio. Debe ajustarlo(s) antes de continuar."; // TODO agregar forma automatica de actualizar los precios
//                    throw new PriceChangedException(message, diferentPricesList);
//                }
//                JOptionPane.showMessageDialog(makeSale, message, "Información", JOptionPane.INFORMATION_MESSAGE);
//            }
//        } catch (IOException ex) {
//            Logger.getInstance().updateErrorLog(ex);
//        } catch (UnmapedProductsException ex) {
//            Logger.getInstance().updateInfoLog(ex.getMessage());
//            int showConfirmDialog = JOptionPane.showConfirmDialog(makeSale, ex.getMessage() + "\nDesea solucionarlo ahora?", "Confirmación", JOptionPane.OK_CANCEL_OPTION);
//            if (showConfirmDialog == 0) {
//                MapperGestion dialogMakeCurrentsDaySaleMap = new MapperGestion((JFrame) makeSale.getParent(), makeSale.isModal(),connection, makeSale, operationsCRUD, itemsCRUD, ex.getUnmappedItemsList());
//                dialogMakeCurrentsDaySaleMap.setLocationRelativeTo(null);
//                dialogMakeCurrentsDaySaleMap.setVisible(true);
//            }
//        } catch (PriceChangedException ex) {
//            Logger.getInstance().updateInfoLog(ex.getMessage());
//            int showConfirmDialog = JOptionPane.showConfirmDialog(makeSale, ex.getMessage() + "\nDesea solucionarlo ahora?", "Confirmación", JOptionPane.OK_CANCEL_OPTION);
//            if (showConfirmDialog == 0) {
//                try {
//                    itemsCRUD.updatePrices(ex.getDiferentPricesList());
//                } catch (SQLException sqlEx) {
//                    Logger.getInstance().updateErrorLog(sqlEx);
//                }
//            }
//        }
//    }
}
